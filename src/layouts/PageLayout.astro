---
import BasicLayout from "../layouts/BasicLayout.astro";
import Grid from "../components/Grid.astro"; // Import the Grid component
import Text from "../components/Text.astro"; // Import the Text component

const fetchGlobalMeta = async () => {
  const response = await fetch(
    "https://payload-nrx5.onrender.com/api/globals/siteinfos"
  );
  const data = await response.json();
  return data.previewImage.url;
};

const previewImageUrl = await fetchGlobalMeta();
//@ts-ignore
const fetchData = async (slug, lang) => {
  console.log(
    "Started fetchData in PageLayout with slug",
    slug,
    "and lang",
    lang
  );
  const response = await fetch(
    `https://payload-nrx5.onrender.com/api/pages?locale=${lang}`
  );
  const data = await response.json();
  console.log("data in pageLayout", data);
  const page = data.docs.find(
    (doc: any) => doc.slug === slug && doc.languageVersionPublished
  );
  if (!page) {
    throw new Error(`Page with slug '${slug}' not found or not published`);
  }
  let pageComponents = page.components.map((comp: any) => {
    if (comp.blockType === "grid") {
      return { type: "grid" };
    } else if (comp.blockType === "text") {
      // Extracting text content from the nested structure
      const textContent = comp.content.root.children
        .map((paragraph: any) =>
          paragraph.children.map((sentence: any) => sentence.text).join("")
        )
        .join("\n");
      return { richtext: textContent, type: "text" };
    } else {
      // Default case to handle unexpected blockType
      return { type: "unknown" };
    }
  });
  return {
    pageMeta: {
      pageTitle: page.pageTitle,
    },
    id: page.id,
    components: pageComponents,
  };
};

const { slug, lang } = Astro.props;
const { pageMeta, components, id } = await fetchData(slug, lang);
---

<BasicLayout lang={lang} contentType="page" id={id}>
  {
    //@ts-ignore
    components.map((component) => {
      if (component.type === "grid") {
        return <Grid lang={lang} />;
      } else if (component.type === "text") {
        return <Text richtext={component.richtext} />;
      }
    })
  }
</BasicLayout>
