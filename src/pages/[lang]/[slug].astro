---
import PageLayout from "../../layouts/PageLayout.astro";
import BlogPostLayout from "../../layouts/BlogPostLayout.astro";

export async function getStaticPaths() {
  // Fetch the list of pages and interviews for all locales
  const locales = ["en", "de", "fr"];

  let paths: {
    params: { lang: string; slug: string }; // Changed isInterview to string
  }[] = [];
  console.log(paths);
  for (const locale of locales) {
    // Fetch pages
    const pagesResponse = await fetch(
      `https://payload-nrx5.onrender.com/api/pages?locale=${locale}&fallback-locale=none`
    );
    const pagesData = await pagesResponse.json();
    const pages = {
      ...pagesData,
      docs: pagesData.docs.filter(
        (doc: { languageVersionPublished: boolean }) =>
          doc.languageVersionPublished
      ),
    };

    const localePaths = pages.docs.map(
      (doc: { slug: string; lang: string }) => ({
        params: { lang: locale, slug: doc.slug },
        isInterview: false,
      })
    );

    const interviewsResponse = await fetch(
      `https://payload-nrx5.onrender.com/api/interviews?locale=${locale}&fallback-locale=none`
    );
    const interviews = await interviewsResponse.json();

    // Generate paths for each language and interviewSlug combination
    const interviewPaths = interviews.docs
      .filter(
        (doc: { languageVersionPublished: boolean }) =>
          doc.languageVersionPublished
      )
      .map((doc: { interviewSlug: string }) => ({
        params: { lang: locale, slug: doc.interviewSlug },
        isInterview: true,
      }));
    paths = paths.concat(localePaths, interviewPaths);
  }
  console.log(paths);
  return paths;
}

const { lang, slug } = Astro.params;

type Path = {
  params: { lang: string; slug: string };
  isInterview: boolean;
};

// Define a type for the function's return value
type PageTypeResult = {
  slug: string;
  isInterview: boolean;
};

/**
 * Iterates over the paths and returns an array indicating whether each path is an interview.
 * @param paths Array of path objects.
 * @returns Array of objects with slug and isInterview properties.
 */
export function getPageTypes(paths: Path[]): PageTypeResult[] {
  return paths.map((path) => ({
    slug: path.params.slug,
    isInterview: path.isInterview,
  }));
}

const paths = await getStaticPaths(); // Fetch the paths
//@ts-ignore
const pageTypes = getPageTypes(paths); // Get the page types

const currentPageType = pageTypes.find((page) => page.slug === slug);
let isInterview = currentPageType ? currentPageType.isInterview : false;
---

{
  isInterview ? (
    <BlogPostLayout slug={slug} lang={lang} />
  ) : (
    <PageLayout slug={slug} lang={lang} />
  )
}
